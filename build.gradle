import java.text.SimpleDateFormat


def getDevelopmentVersion() {
    def output = new StringBuilder()
    def error = new StringBuilder()
    def gitShortHash = ["git", "-C", projectDir.toString(), "rev-parse", "--short", "HEAD"].execute()
    gitShortHash.waitForProcessOutput(output, error)
    def gitHash = output.toString().trim()
    if (gitHash.isEmpty()) {
        println "git hash is empty: error: ${error.toString()}"
        throw new IllegalStateException("git hash could not be determined")
    }
    def version = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date()) + "-" + gitHash
    println "created development version: $version"
    version
}


repositories {
    mavenCentral()
    mavenLocal()
}
def releaseVersion = System.env.RELEASE_VERSION
version = releaseVersion ? releaseVersion : getDevelopmentVersion()
group = 'com.cognitiff'

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'
    apply plugin: 'signing'


    sourceCompatibility = 11
    targetCompatibility = 11
    version = releaseVersion ? releaseVersion : getDevelopmentVersion()
    group = 'com.cognitiff'

    ext {
        graphqlJavaVersion = "15.0"
        springVersion = "5.1.7.RELEASE"
        springBootVersion = "2.1.5.RELEASE"
        jacksonVersion = "2.9.8"
        assertJVersion = "3.11.1"
        atlassianConnectSpringBootVersion = "2.1.5"
        javaxAnnotationVersion = "1.3.2"
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }


    task sourcesJar(type: Jar) {
        dependsOn classes
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {

        publications {

            graphqlJava(MavenPublication) {
                version version
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name project.name
                        description project.description
                        url "https://github.com/COGNITIFF/graphql-java-spring"
                        scm {
                            connection "scm:git://github.com/COGNITIFF/graphql-java-spring.git"
                            developerConnection "scm:git:ssh://github.com/COGNITIFF/graphql-java-spring.git"
                            url "https://github.com/COGNITIFF/graphql-java-spring"
                        }
                        licenses {
                            license {
                                name 'MIT'
                                url 'https://github.com/COGNITIFF/graphql-java-spring/blob/master/LICENSE.md'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'mpelnens'
                                name 'Markus Pelnens'
                            }
                        }
                    }
                }

                repositories {
                    maven {
                        name = "GitHubPackages"
                        url = "https://maven.pkg.github.com/COGNITIFF/graphql-java-spring"
                        credentials {
                            username = System.getenv("GITHUB_ACTOR")
                            password = System.getenv("GITHUB_TOKEN")
                        }
                    }
                }
            }
        }


// all publish tasks depend on the build task
        tasks.withType(PublishToMavenRepository) {
            dependsOn build
        }

    }


    task myWrapper(type: Wrapper) {
        gradleVersion = '6.9'
        distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
    }
}